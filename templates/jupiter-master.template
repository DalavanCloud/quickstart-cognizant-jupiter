{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This templates creates a stack for JUPITER",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network"
                    },
                    "Parameters": [
                        "VpcId",
                        "PublicSubnetIds",
						"PrivateSubnetIds"
                    ]
                },
                {
                    "Label": {
                        "default": "Elastic Beanstalk"
                    },
                    "Parameters": [
						"SolutionStackName",
						"WarS3Bucket",
						"WarS3Key",
						"KeyPairName",
						"JupiterSSLCert",
						"JupiterInstanceType",
						"EmrBootstrapKey"
					]
				},
				{
					"Label": {
                        "default": "Database"
                    },
                    "Parameters": [					
						"DBName",
						"DbEngine",
						"DbClass",
						"MasterDBUser",
						"MasterDBPassword"						
                    ]
                },
                {
                    "Label": {
                        "default": "EMR"
                    },
                    "Parameters": [
						"CreateEmr",
                        "EmrMasterInstanceType",
						"EmrCoreInstanceType",
						"EmrCoreNodes",
						"EmrLogBucket"
                    ]
                }
            ],
            "ParameterLabels": {
                "SolutionStackName": {
                    "default": "Elastic Beanstalk technology stack"
                },
                "WarS3Bucket": {
                    "default": "S3 Bucket holding the .war file for the web application"
                },
                "WarS3Key": {
                    "default": "S3 key of the .war file object"
                },
                "EmrBootstrapKey": {
                    "default": "S3 key of the EMR bootstrap script"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "JupiterSSLCert": {
                    "default": "Jupiter SSL Certificate"
                },
				"JupiterInstanceType": {
					"default": "EC2 Instance Type"
				},
				"DBName": {
					"default": "Database Name"
				},
				"DbEngine": {
					"default": "Database Engine"
				},
				"DbClass": {
					"default": "Database Instance Type"
				},
				"MasterDBUser": {
					"default": "Database Master Username"
				},
				"MasterDBPassword": {
					"default": "Password for Database Master User"
				},
                "CreateEmr": {
                    "default": "Create EMR"
                },
                "EmrMasterInstanceType": {
                    "default": "EMR Master Instance Type"
                },
                "EmrCoreInstanceType": {
                    "default": "EMR Core Instance Type"
                },
                "EmrCoreNodes": {
                    "default": "EMR Core Nodes"
                },
                "EmrLogBucket": {
                    "default": "EMR Log Bucket"
                },
                "VpcId": {
                    "default": "VPC ID"
                },
                "PublicSubnetIds": {
                    "default": "Public Subnet Ids"
                },
                "PrivateSubnetIds": {
                    "default": "Private Subnet Ids"
                }
			}
		}
	},
    "Parameters": {
        "SolutionStackName": {
            "AllowedValues": ["64bit Amazon Linux 2017.09 v2.7.6 running Tomcat 8 Java 8", "64bit Amazon Linux 2017.09 v2.7.6 running Tomcat 7 Java 7", "64bit Amazon Linux 2017.09 v2.7.6 running Tomcat 7 Java 6"],
            "ConstraintDescription": "Must be a valid and supported technology stack on Elastic Beanstalk",
            "Default": "64bit Amazon Linux 2017.09 v2.7.6 running Tomcat 8 Java 8",
            "Description": "Elastic Beanstalk technology stack",
            "Type": "String"
        },
        "WarS3Bucket": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "S3 bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Default": "jupiter.uswest1",
            "Description": "S3 bucket name for the JUPITER web application .war file. This bucket must be in the same region where this stack is being deployed. Bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Type": "String"
        },
        "EmrLogBucket": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "S3 bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Default": "jupiter.emrlogs.uswest1",
            "Description": "S3 bucket name for the EMR logs. This bucket must be in the same region where this stack is being deployed. Bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Type": "String"
        },
        "WarS3Key": {
            "AllowedPattern": "^[0-9a-zA-Z-.]*$",
            "ConstraintDescription": "S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Default": "jupiter-6Nov-v7.war",
            "Description": "S3 key for the JUPITER web application .war file. S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Type": "String"
        },
        "EmrBootstrapKey": {
            "AllowedPattern": "^[0-9a-zA-Z-.]*$",
            "ConstraintDescription": "S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Default": "emrbootstrap.sh",
            "Description": "S3 key for the EMR bootstrap script file. This object must be on the same bucket as the web application .war file. S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "JupiterSSLCert": {
            "Description": "ARN of the SSL certificate for terminating HTTPS connections on the load balancer; leave this blank to disable SSL, however it is strongly recommended to turn on SSL in production environments",
            "Type": "String",
			"Default": "arn:aws:acm:us-west-1:140089806333:certificate/11002b7b-f6e9-4db0-83ba-3a1cf39f66e7"
        },
        "DBName": {
            "Default": "jupiterdb",
            "Description": "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
		"MasterDBUser": {
            "Description": "Master user name for database",
            "Type": "String",
            "Default": "jupiter",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MasterDBPassword": {
            "Description": "Master user password for database. Can only contain alphanumeric characters or the following special characters !^*-_+",
            "NoEcho": true,
            "Type": "String",
			"MinLength": 8,
            "MaxLength": 28,
            "AllowedPattern": "[a-zA-Z0-9!^*\\-_+]*",
			"ConstraintDescription": "Can only contain alphanumeric characters or the following special characters !^*-_+"
        },
        "CreateEmr": {
            "Description": "Set this to true to create a new EMR instance. If you do not wish to use EMR or want to use an existing EMR, set this to false.",
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "JupiterInstanceType": {
            "Description": "JUPITER EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DbEngine": {
            "Description": "Type of RDS instance",
            "Type": "String",
            "Default": "mysql",
            "AllowedValues": [ "mysql" ]
        },
        "DbClass": {
            "Description": "Instance class of RDS instance",
            "Type": "String",
            "Default": "db.t2.micro",
            "AllowedValues": [
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge"
            ]
        },
		"EmrMasterInstanceType": {
            "AllowedValues": [
                "m1.medium", 
				"m1.large", 
				"m1.xlarge", 
				"m2.xlarge", 
				"m2.2xlarge", 
				"m2.4xlarge", 
				"m3.xlarge", 
				"m3.2xlarge",
				"m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge"
            ],
            "Default": "m1.medium",
            "Description": "Instance type for the EMR master node",
            "Type": "String"
        },
		"EmrCoreInstanceType": {
            "AllowedValues": [
				"m1.medium", 
				"m1.large", 
				"m1.xlarge", 
				"m2.xlarge", 
				"m2.2xlarge", 
				"m2.4xlarge", 
				"m3.xlarge", 
				"m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge"
            ],
            "Default": "m1.medium",
            "Description": "Instance type for the EMR core nodes",
            "Type": "String"
        },
		"EmrCoreNodes": {
            "Description": "Number of EMR Core Nodes. Minimum 1",
            "MaxValue": "500",
            "MinValue": "1",
            "Type": "Number",
			"Default": "1"
        },
        "VpcId": {
            "Description": "ID of the existing VPC where the AWS resources will be deployed through the CloudFormation templates",
            "Type": "AWS::EC2::VPC::Id"
        },
        "PublicSubnetIds": {
        	"Description": "IDs of Public Subnets in the existing VPC; select at least one subnet",
        	"Type": "List<AWS::EC2::Subnet::Id>"
        },
        "PrivateSubnetIds": {
        	"Description": "IDs of Private Subnets in the existing VPC; select at least two subnets",
        	"Type": "List<AWS::EC2::Subnet::Id>"
        }
	},
    "Mappings": {
		"RegionMap": {
            "ap-northeast-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-northeast-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-south-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-southeast-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-southeast-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "ca-central-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-central-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-west-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-west-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "sa-east-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-east-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-east-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-west-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-west-2": {
                "EmrVersion": "emr-5.9.0"
            }
        },
		"DBOptions": {
			"mysql": {
				"TcpPort": "3306"
			},
			"postgres": {
				"TcpPort": "5432"
			}
		}
    },
    "Conditions": {
        "CreateEmrCondition": {
            "Fn::Equals": [ "true", { "Ref": "CreateEmr" } ]
        },
		"NoSSL": {
			"Fn::Equals": [ "", { "Ref": "JupiterSSLCert" } ]
		}
	},
    "Rules": {
		"SubnetsInVPC": {
			"Assertions" : [
				{
					"Assert" : { 
                        "Fn::EachMemberIn": [
							{
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
							},
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
					},
					"AssertDescription" : "Subnets must belong to specified VPC"
				}
			]
		}
	},
	"Resources": {
		"JupiterBootstrapDownloadPolicy": {
			"Type" : "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Join": [
						"-",
						[
							{ "Ref": "AWS::StackName" },
							"JupiterBootstrapDownloadPolicy"
						]
					]
				},
				"Roles": [ "EMR_DefaultRole" ],
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement":[
						{
							"Effect": "Allow",
							"Action": [ "s3:GetObject" ],
							"Resource": [ { "Fn::Sub": "arn:aws:s3:::${WarS3Bucket}/*" } ]
						}
					]
				}
			}
		},
		"JupiterIAMRole": {
			"Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "sts:AssumeRole" ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier",
					"arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier",
					"arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker",
					"arn:aws:iam::aws:policy/IAMSelfManageServiceSpecificCredentials",
					"arn:aws:iam::aws:policy/AWSCertificateManagerReadOnly"
				],
                "Policies": [
                    {
                        "PolicyName":"WarAccess",
                        "PolicyDocument":{
                            "Statement":[
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        { "Fn::Sub": "arn:aws:s3:::${WarS3Bucket}" }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        { "Fn::Sub": "arn:aws:s3:::${WarS3Bucket}/*" }
                                    ]
                                }
                            ]
                        }
                    }
				]
			}
		},
		"DBSubnetGroup" : {
			"Type" : "AWS::RDS::DBSubnetGroup",
			"Properties" : {
				"SubnetIds" : {  "Ref": "PrivateSubnetIds" },
				"DBSubnetGroupDescription" : "JUPITER database subnet group"
			}
		},
        "JupiterInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [ { "Ref": "JupiterIAMRole" } ]
            }
        },
		"JupiterBeanstalk": {
			"Type" : "AWS::ElasticBeanstalk::Application",
			"Properties" : {
				"ApplicationName" : {
					"Fn::Join": [
						"-",
						[
							{ "Ref": "AWS::StackName" },
							"JupiterBeanstalk"
						]
					]
				},
				"Description" : "AWS Elastic Beanstalk for JUPITER"
			}
		},
		"JupiterVersion" :{ 
			"Type" : "AWS::ElasticBeanstalk::ApplicationVersion",
			"Properties" : {
				"ApplicationName" : { "Ref" : "JupiterBeanstalk" },
				"Description" : "JUPITER continuous testing",
				"SourceBundle" : {
					"S3Bucket" : { "Ref" : "WarS3Bucket" },
					"S3Key" : { "Ref" : "WarS3Key" }
				} 
			}
		},
		"JupiterConfigurationTemplate": {
			"Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
			"DependsOn": "JupiterDBInstance",
			"Properties": {
				"ApplicationName": { "Ref": "JupiterBeanstalk" },
				"Description": "JUPITER Configuration Template",				
				"SolutionStackName": { "Ref" : "SolutionStackName" },
				"OptionSettings": {
					"Fn::If": [ "NoSSL",
						[
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "VPCId",
								"Value" : { "Ref" : "VpcId" }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "ELBSubnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PublicSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "Subnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PublicSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "DBSubnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PrivateSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "AssociatePublicIpAddress",
								"Value" : "true"				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "EC2KeyName",
								"Value" : { "Ref" : "KeyPairName" }				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "InstanceType",
								"Value" : { "Ref" : "JupiterInstanceType" }				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "IamInstanceProfile",
								"Value" : { "Fn::GetAtt" : ["JupiterInstanceProfile", "Arn"] }				
							},
							{
								"Namespace" : "aws:autoscaling:asg",
								"OptionName" : "MinSize",
								"Value" : "1"				
							},
							{
								"Namespace" : "aws:autoscaling:asg",
								"OptionName" : "MaxSize",
								"Value" : "1"				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:environment",
								"OptionName" : "ServiceRole",
								"Value" : "aws-elasticbeanstalk-service-role"				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:environment",
								"OptionName" : "LoadBalancerType",
								"Value" : "classic"				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
<<<<<<< HEAD
								"OptionName" : "RDS_USERNAME",
								"Value" : { "Ref": "MasterDBUser" }
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
								"OptionName" : "RDS_PASSWORD",
								"Value" : { "Ref": "MasterDBPassword" }
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
=======
>>>>>>> 94fd0b5b26fba76d62dac0fdc7d5ef7821945642
								"OptionName" : "JDBC_CONNECTION_STRING",
								"Value" : {
									"Fn::Join": [
										"",
										[
											"jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"JupiterDBInstance",
													"Endpoint.Address"
												]
											},
											":",
											{
												"Fn::GetAtt": [
													"JupiterDBInstance",
													"Endpoint.Port"
												]
											},
											"/",
											{
												"Ref": "DBName"
											}
										]
									]
								}				
							}
						],					
						[
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "VPCId",
								"Value" : { "Ref" : "VpcId" }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "ELBSubnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PublicSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "Subnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PublicSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "DBSubnets",
								"Value" : { "Fn::Join": [ ",", {  "Ref": "PrivateSubnetIds" } ] }				
							},
							{
								"Namespace" : "aws:ec2:vpc",
								"OptionName" : "AssociatePublicIpAddress",
								"Value" : "true"				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "EC2KeyName",
								"Value" : { "Ref" : "KeyPairName" }				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "InstanceType",
								"Value" : { "Ref" : "JupiterInstanceType" }				
							},
							{
								"Namespace" : "aws:autoscaling:launchconfiguration",
								"OptionName" : "IamInstanceProfile",
								"Value" : { "Fn::GetAtt" : ["JupiterInstanceProfile", "Arn"] }				
							},
							{
								"Namespace" : "aws:autoscaling:asg",
								"OptionName" : "MinSize",
								"Value" : "1"				
							},
							{
								"Namespace" : "aws:autoscaling:asg",
								"OptionName" : "MaxSize",
								"Value" : "1"				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:environment",
								"OptionName" : "ServiceRole",
								"Value" : "aws-elasticbeanstalk-service-role"				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:environment",
								"OptionName" : "LoadBalancerType",
								"Value" : "classic"				
							},
							{
								"Namespace" : "aws:elb:loadbalancer",
								"OptionName" : "LoadBalancerHTTPSPort",
								"Value" : "443"				
							},
							{
								"Namespace" : "aws:elb:loadbalancer",
								"OptionName" : "LoadBalancerSSLPortProtocol",
								"Value" : "HTTPS"				
							},
							{
								"Namespace" : "aws:elb:loadbalancer",
								"OptionName" : "SSLCertificateId",
								"Value" : { "Ref" : "JupiterSSLCert" }				
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
<<<<<<< HEAD
								"OptionName" : "RDS_USERNAME",
								"Value" : { "Ref": "MasterDBUser" }
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
								"OptionName" : "RDS_PASSWORD",
								"Value" : { "Ref": "MasterDBPassword" }
							},
							{
								"Namespace" : "aws:elasticbeanstalk:application:environment",
=======
>>>>>>> 94fd0b5b26fba76d62dac0fdc7d5ef7821945642
								"OptionName" : "JDBC_CONNECTION_STRING",
								"Value" : {
									"Fn::Join": [
										"",
										[
											"jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"JupiterDBInstance",
													"Endpoint.Address"
												]
											},
											":",
											{
												"Fn::GetAtt": [
													"JupiterDBInstance",
													"Endpoint.Port"
												]
											},
											"/",
											{
												"Ref": "DBName"
											}
										]
									]
								}				
							}
						]
					]
				}
			}
		},
		"JupiterEnvironment": {
			"Type": "AWS::ElasticBeanstalk::Environment",
			"Properties": {
				"ApplicationName": { "Ref": "JupiterBeanstalk" },
				"EnvironmentName" :  {
					"Fn::Join": [
						"-",
						[
							{ "Ref": "AWS::StackName" },
							"JupiterEnvironment"
						]
					]
				},
				"Description": "JUPITER Environment",
				"TemplateName": { "Ref": "JupiterConfigurationTemplate" },
				"VersionLabel": { "Ref": "JupiterVersion" },
				"Tier": {
					"Type": "Standard",
					"Name": "WebServer"
				}
			}
		},
        "JupiterDBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow access to DB from Autoscaling group",
				"SecurityGroupIngress": [
                    {
						"IpProtocol" : "tcp",
						"FromPort" : { "Fn::FindInMap": [ "DBOptions", { "Ref": "DbEngine" }, "TcpPort" ] },
						"ToPort" : { "Fn::FindInMap": [ "DBOptions", { "Ref": "DbEngine" }, "TcpPort" ] },
						"CidrIp" : "0.0.0.0/0"
                    }					
				]
            }
        },
        "JupiterDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "DependsOn": [ "DBSubnetGroup", "JupiterDBSecurityGroup" ],
			"DeletionPolicy": "Delete",
            "Properties": {
				"DBName": {
                    "Ref": "DBName"
                },
                "Engine": { "Ref": "DbEngine" },
                "AllocatedStorage": "20",
                "DBInstanceClass": { "Ref": "DbClass" },
                "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
				"VPCSecurityGroups": [{ "Ref": "JupiterDBSecurityGroup" }],
                "MasterUsername": { "Ref": "MasterDBUser" },
                "MasterUserPassword": { "Ref": "MasterDBPassword" }
            }
        },
        "EmrMasterPrivateSecurityGroup": {
        	"Condition": "CreateEmrCondition",
			"Type": "AWS::EC2::SecurityGroup",
        	"Properties": {
        		"GroupDescription": "EMR Master Instance security group",
        		"VpcId": {
                    "Ref": "VpcId"
                }
        	}
        },
        "EmrSlavePrivateSecurityGroup": {
        	"Condition": "CreateEmrCondition",
			"Type": "AWS::EC2::SecurityGroup",
        	"Properties": {
        		"GroupDescription": "EMR Slave Instance security group",
        		"VpcId": {
                    "Ref": "VpcId"
                }
        	}
        },
        "EmrServiceAccessSecurityGroup": {
        	"Condition": "CreateEmrCondition",
			"Type": "AWS::EC2::SecurityGroup",
        	"Properties": {
        		"GroupDescription": "EMR Service Access security group",
        		"VpcId": {
                    "Ref": "VpcId"
                }
        	}
        },
        "TCPFromServiceAccessSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "8443",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrServiceAccessSecurityGroup", "GroupId" ] },
		    	"ToPort" : "8443"
		  	}
		},
        "TCPFromSlaveSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"TCPFromMasterSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"ICMPFromSlaveSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "-1",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "icmp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "-1"
		  	}
		},
        "ICMPFromMasterSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "-1",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "icmp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "-1"
		  	}
		},
        "UDPFromSlaveSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "udp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"UDPFromMasterSecurityGroupIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "udp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
        "TCPFromServiceAccessIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "8443",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrServiceAccessSecurityGroup", "GroupId" ] },
		    	"ToPort" : "8443"
		  	}
		},
        "TCPFromSlaveIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"TCPFromMasterIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"ICMPFromSlaveIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "-1",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "icmp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "-1"
		  	}
		},
        "ICMPFromMasterIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "-1",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ]  },
		    	"IpProtocol" : "icmp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "-1"
		  	}
		},
        "UDPFromSlaveIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ]  },
		    	"IpProtocol" : "udp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
		"UDPFromMasterIngress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupIngress",
		  	"Properties" : {
		    	"FromPort" : "0",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ]  },
		    	"IpProtocol" : "udp",
		    	"SourceSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "65535"
		  	}
		},
        "TCPMasterEgress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupEgress",
		  	"Properties" : {
		    	"FromPort" : "8443",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrServiceAccessSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"DestinationSecurityGroupId" : { "Fn::GetAtt": [ "EmrMasterPrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "8443"
		  	}
		},
        "TCPSlaveEgress": {
		  	"Condition": "CreateEmrCondition",
			"Type" : "AWS::EC2::SecurityGroupEgress",
		  	"Properties" : {
		    	"FromPort" : "8443",
		    	"GroupId" : { "Fn::GetAtt": [ "EmrServiceAccessSecurityGroup", "GroupId" ] },
		    	"IpProtocol" : "tcp",
		    	"DestinationSecurityGroupId" : { "Fn::GetAtt": [ "EmrSlavePrivateSecurityGroup", "GroupId" ] },
		    	"ToPort" : "8443"
		  	}
		},
        "RemoteAccessEmrSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable EMR remote access",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
		"JupiterEmr": {
            "Type": "AWS::EMR::Cluster",
            "Condition": "CreateEmrCondition",
			"Properties": {
				"BootstrapActions": [
					{ 
						"Name": "JUPITER_pre-requisites",
						"ScriptBootstrapAction": { 
							"Path": { 
								"Fn::Join": [ "/", [ "s3:/", { "Ref": "WarS3Bucket" }, { "Ref": "EmrBootstrapKey" } ] ]
							}
						}
					}
				],
                "Instances": {
                    "MasterInstanceGroup": {
                        "InstanceCount": 1,
                        "InstanceType": { "Ref": "EmrMasterInstanceType" },
                        "Market": "ON_DEMAND",
                        "Name": "Master"
                    },
                    "CoreInstanceGroup": {
                        "InstanceCount": { "Ref": "EmrCoreNodes" },
                        "InstanceType": { "Ref": "EmrCoreInstanceType" },
                        "Market": "ON_DEMAND",
                        "Name": "Core"
                    },
                    "TerminationProtected": false,
                    "Ec2SubnetId": { "Fn::Select" : [ "0", { "Fn::Split": [ ",", { "Fn::Join": [ ",", {  "Ref": "PrivateSubnetIds" } ] } ] } ] },
                    "Ec2KeyName": { "Ref": "KeyPairName" },
					"EmrManagedMasterSecurityGroup": { "Ref":"EmrMasterPrivateSecurityGroup" },
					"EmrManagedSlaveSecurityGroup": { "Ref":"EmrSlavePrivateSecurityGroup" },
					"ServiceAccessSecurityGroup": { "Ref":"EmrServiceAccessSecurityGroup" },
                    "AdditionalMasterSecurityGroups": [
                        { "Ref": "RemoteAccessEmrSecurityGroup" }
                    ]
                },
                "Applications": [
                    { "Name": "Hadoop" },
                    { "Name": "Hive" },
                    { "Name": "Pig" },
					{ "Name": "Hue" },
                    { "Name": "Spark" }
                ],
				"LogUri": { "Fn::Join": [ "/", [ "s3:/", { "Ref": "EmrLogBucket" } ] ] },
                "ReleaseLabel": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "EmrVersion"
                    ]
                },
                "Name": "JupiterEmr",
                "JobFlowRole": "EMR_EC2_DefaultRole",
                "ServiceRole": "EMR_DefaultRole",
                "VisibleToAllUsers": true
			}
		}
    },
    "Outputs": {
        "JupiterAppEndpoint": {
            "Value": { 
				"Fn::If": [ "NoSSL",
					{ "Fn::Join": [ "/", [ "http:/", { "Fn::GetAtt" : ["JupiterEnvironment", "EndpointURL" ] } ] ] },
					{ "Fn::Join": [ "/", [ "https:/", { "Fn::GetAtt" : ["JupiterEnvironment", "EndpointURL" ] } ] ] }
				]
			},
            "Description": "JUPITER Application URL",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:JupiterAppEndpoint" }
			}
        },
        "JupiterDBEndpoint": {
            "Value": { "Fn::GetAtt": [ "JupiterDBInstance", "Endpoint.Address" ] },
            "Description": "Database endpoint hostname",
            "Export": {
				"Name":{ "Fn::Sub": "${AWS::StackName}:JupiterDBEndpoint" }
            }
        },
        "JupiterEmr": {
			"Condition": "CreateEmrCondition",
            "Value": { "Fn::GetAtt": [ "JupiterEmr", "MasterPublicDNS" ] },
			"Description": "EMR master node endpoint",
            "Export": { "Name":{ "Fn::Sub": "${AWS::StackName}:JupiterEmr" } }
        }
	}
}
